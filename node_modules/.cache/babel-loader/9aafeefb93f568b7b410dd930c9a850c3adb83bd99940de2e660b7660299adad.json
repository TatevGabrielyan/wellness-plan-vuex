{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, vShow as _vShow, withKeys as _withKeys, withDirectives as _withDirectives, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"view\"\n};\nconst _hoisted_2 = [\"checked\"];\nconst _hoisted_3 = [\"textContent\"];\nconst _hoisted_4 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"li\", {\n    class: _normalizeClass([\"todo\", {\n      completed: $props.todo.done,\n      editing: $data.editing\n    }])\n  }, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"input\", {\n    class: \"toggle\",\n    type: \"checkbox\",\n    checked: $props.todo.done,\n    onChange: _cache[0] || (_cache[0] = $event => _ctx.toggleTodo($props.todo))\n  }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_2), _createElementVNode(\"label\", {\n    textContent: _toDisplayString($props.todo.text),\n    onDblclick: _cache[1] || (_cache[1] = $event => $data.editing = true)\n  }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_3), _createElementVNode(\"button\", {\n    class: \"destroy\",\n    onClick: _cache[2] || (_cache[2] = $event => _ctx.removeTodo($props.todo))\n  })]), _withDirectives(_createElementVNode(\"input\", {\n    class: \"edit\",\n    value: $props.todo.text,\n    ref: \"input\",\n    onKeyup: [_cache[3] || (_cache[3] = _withKeys((...args) => $options.doneEdit && $options.doneEdit(...args), [\"enter\"])), _cache[4] || (_cache[4] = _withKeys((...args) => $options.cancelEdit && $options.cancelEdit(...args), [\"esc\"]))],\n    onBlur: _cache[5] || (_cache[5] = (...args) => $options.doneEdit && $options.doneEdit(...args))\n  }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_4), [[_vShow, $data.editing]])], 2 /* CLASS */);\n}","map":{"version":3,"mappings":";;EAEWA,KAAK,EAAC;AAAM;;;;;uBADnBC,oBAgBK;IAhBDD,KAAK,mBAAC,MAAM;MAAAE,WAAsBC,WAAI,CAACC,IAAI;MAAAC,SAAEC;IAAO;MACtDC,oBAOM,OAPNC,UAOM,GANJD,oBAG6B;IAHtBP,KAAK,EAAC,QAAQ;IACnBS,IAAI,EAAC,UAAU;IACdC,OAAO,EAAEP,WAAI,CAACC,IAAI;IAClBO,QAAM,sCAAEC,eAAU,CAACT,WAAI;wDAC1BI,oBAA6D;iBAAtDM,iBAAQV,MAAU,KAAN,CAACW,IAAI;IAAGC,UAAQ,sCAAET,aAAO;wDAC5CC,oBAA2D;IAAnDP,KAAK,EAAC,SAAS;IAAEgB,OAAK,sCAAEJ,eAAU,CAACT,WAAI;wBAEjDI,oBAMmB;IANZP,KAAK,EAAC,MAAM;IAEhBiB,KAAK,EAAEd,WAAI,CAACW,IAAI;IACjBI,GAAG,EAAC,OAAO;IACVC,OAAK,oDAAQC,+CAAQ,gEACVA,mDAAU;IACrBC,MAAI,yCAAED,+CAAQ;kEALPd,aAAO","names":["class","_createElementBlock","completed","$props","done","editing","$data","_createElementVNode","_hoisted_1","type","checked","onChange","_ctx","_toDisplayString","text","onDblclick","onClick","value","ref","onKeyup","$options","onBlur"],"sourceRoot":"","sources":["C:\\Users\\User\\vue-chart\\src\\components\\TodoItem.vue"],"sourcesContent":["<template>\r\n    <li class=\"todo\" :class=\"{ completed: todo.done, editing }\">\r\n      <div class=\"view\">\r\n        <input class=\"toggle\"\r\n          type=\"checkbox\"\r\n          :checked=\"todo.done\"\r\n          @change=\"toggleTodo(todo)\">\r\n        <label v-text=\"todo.text\" @dblclick=\"editing = true\"></label>\r\n        <button class=\"destroy\" @click=\"removeTodo(todo)\"></button>\r\n      </div>\r\n      <input class=\"edit\"\r\n        v-show=\"editing\"\r\n        :value=\"todo.text\"\r\n        ref=\"input\"\r\n        @keyup.enter=\"doneEdit\"\r\n        @keyup.esc=\"cancelEdit\"\r\n        @blur=\"doneEdit\">\r\n    </li>\r\n  </template>\r\n  \r\n  <script>\r\n  import { nextTick } from 'vue'\r\n  import { mapActions } from 'vuex'\r\n  \r\n  export default {\r\n    name: 'Todo',\r\n    props: ['todo'],\r\n    data () {\r\n      return {\r\n        editing: false\r\n      }\r\n    },\r\n    directives: {\r\n      focus (el, { value }, { context }) {\r\n        if (value) {\r\n          context.$nextTick(() => {\r\n            el.focus()\r\n          })\r\n        }\r\n      }\r\n    },\r\n    watch: {\r\n      editing (v) {\r\n        v && nextTick(() => { this.$refs.input.focus() })\r\n      }\r\n    },\r\n    methods: {\r\n      ...mapActions([\r\n        'editTodo',\r\n        'toggleTodo',\r\n        'removeTodo'\r\n      ]),\r\n      doneEdit (e) {\r\n        const value = e.target.value.trim()\r\n        const { todo } = this\r\n        if (!value) {\r\n          this.removeTodo(todo)\r\n        } else if (this.editing) {\r\n          this.editTodo({\r\n            todo,\r\n            value\r\n          })\r\n          this.editing = false\r\n        }\r\n      },\r\n      cancelEdit (e) {\r\n        e.target.value = this.todo.text\r\n        this.editing = false\r\n      }\r\n    }\r\n  }\r\n  </script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}