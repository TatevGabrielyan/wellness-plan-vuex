{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, vShow as _vShow, withKeys as _withKeys, withDirectives as _withDirectives, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"view\"\n};\nconst _hoisted_2 = [\"checked\"];\nconst _hoisted_3 = [\"textContent\"];\nconst _hoisted_4 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"li\", {\n    class: _normalizeClass([\"todo\", {\n      completed: $props.todo.done,\n      editing: $data.editing\n    }])\n  }, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"input\", {\n    class: \"toggle\",\n    type: \"checkbox\",\n    checked: $props.todo.done,\n    onChange: _cache[0] || (_cache[0] = $event => _ctx.toggleTodo($props.todo))\n  }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_2), _createElementVNode(\"label\", {\n    textContent: _toDisplayString($props.todo.text),\n    onDblclick: _cache[1] || (_cache[1] = $event => $data.editing = true)\n  }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_3), _createElementVNode(\"button\", {\n    class: \"destroy\",\n    onClick: _cache[2] || (_cache[2] = $event => _ctx.removeTodo($props.todo))\n  })]), _withDirectives(_createElementVNode(\"input\", {\n    class: \"edit\",\n    value: $props.todo.text,\n    ref: \"input\",\n    onKeyup: [_cache[3] || (_cache[3] = _withKeys((...args) => $options.doneEdit && $options.doneEdit(...args), [\"enter\"])), _cache[4] || (_cache[4] = _withKeys((...args) => $options.cancelEdit && $options.cancelEdit(...args), [\"esc\"]))],\n    onBlur: _cache[5] || (_cache[5] = (...args) => $options.doneEdit && $options.doneEdit(...args))\n  }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_4), [[_vShow, $data.editing]])], 2 /* CLASS */);\n}","map":{"version":3,"mappings":";;EAESA,KAAK,EAAC;AAAM;;;;;uBADnBC,oBAgBK;IAhBDD,KAAK,mBAAC,MAAM;MAAAE,WAAsBC,WAAI,CAACC,IAAI;MAAAC,SAAEC;IAAO;MACtDC,oBAOM,OAPNC,UAOM,GANJD,oBAG6B;IAHtBP,KAAK,EAAC,QAAQ;IACnBS,IAAI,EAAC,UAAU;IACdC,OAAO,EAAEP,WAAI,CAACC,IAAI;IAClBO,QAAM,sCAAEC,eAAU,CAACT,WAAI;wDAC1BI,oBAA6D;iBAAtDM,iBAAQV,MAAU,KAAN,CAACW,IAAI;IAAGC,UAAQ,sCAAET,aAAO;wDAC5CC,oBAA2D;IAAnDP,KAAK,EAAC,SAAS;IAAEgB,OAAK,sCAAEJ,eAAU,CAACT,WAAI;wBAEjDI,oBAMmB;IANZP,KAAK,EAAC,MAAM;IAEhBiB,KAAK,EAAEd,WAAI,CAACW,IAAI;IACjBI,GAAG,EAAC,OAAO;IACVC,OAAK,oDAAQC,+CAAQ,gEACVA,mDAAU;IACrBC,MAAI,yCAAED,+CAAQ;kEALPd,aAAO","names":["class","_createElementBlock","completed","$props","done","editing","$data","_createElementVNode","_hoisted_1","type","checked","onChange","_ctx","_toDisplayString","text","onDblclick","onClick","value","ref","onKeyup","$options","onBlur"],"sourceRoot":"","sources":["C:\\Users\\User\\vue-chart\\src\\components\\TodoItem.vue"],"sourcesContent":["<template>\n  <li class=\"todo\" :class=\"{ completed: todo.done, editing }\">\n    <div class=\"view\">\n      <input class=\"toggle\"\n        type=\"checkbox\"\n        :checked=\"todo.done\"\n        @change=\"toggleTodo(todo)\">\n      <label v-text=\"todo.text\" @dblclick=\"editing = true\"></label>\n      <button class=\"destroy\" @click=\"removeTodo(todo)\"></button>\n    </div>\n    <input class=\"edit\"\n      v-show=\"editing\"\n      :value=\"todo.text\"\n      ref=\"input\"\n      @keyup.enter=\"doneEdit\"\n      @keyup.esc=\"cancelEdit\"\n      @blur=\"doneEdit\">\n  </li>\n</template>\n\n<script>\nimport { nextTick } from 'vue'\nimport { mapActions } from 'vuex'\n\nexport default {\n  name: 'Todo',\n  props: ['todo'],\n  data () {\n    return {\n      editing: false\n    }\n  },\n  directives: {\n    focus (el, { value }, { context }) {\n      if (value) {\n        context.$nextTick(() => {\n          el.focus()\n        })\n      }\n    }\n  },\n  watch: {\n    editing (v) {\n      v && nextTick(() => { this.$refs.input.focus() })\n    }\n  },\n  methods: {\n    ...mapActions([\n      'editTodo',\n      'toggleTodo',\n      'removeTodo'\n    ]),\n    doneEdit (e) {\n      const value = e.target.value.trim()\n      const { todo } = this\n      if (!value) {\n        this.removeTodo(todo)\n      } else if (this.editing) {\n        this.editTodo({\n          todo,\n          value\n        })\n        this.editing = false\n      }\n    },\n    cancelEdit (e) {\n      e.target.value = this.todo.text\n      this.editing = false\n    }\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}