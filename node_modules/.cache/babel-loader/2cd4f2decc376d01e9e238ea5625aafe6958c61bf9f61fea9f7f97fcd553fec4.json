{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, withKeys as _withKeys, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, vShow as _vShow, withDirectives as _withDirectives, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"todoapp\"\n};\nconst _hoisted_2 = {\n  class: \"header\"\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"todos\", -1 /* HOISTED */);\nconst _hoisted_4 = {\n  class: \"main\"\n};\nconst _hoisted_5 = [\"checked\"];\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"toggle-all\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_7 = {\n  class: \"todo-list\"\n};\nconst _hoisted_8 = {\n  class: \"footer\"\n};\nconst _hoisted_9 = {\n  class: \"todo-count\"\n};\nconst _hoisted_10 = {\n  class: \"filters\"\n};\nconst _hoisted_11 = [\"href\", \"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_TodoItem = _resolveComponent(\"TodoItem\");\n  return _openBlock(), _createElementBlock(\"section\", _hoisted_1, [_createCommentVNode(\" header \"), _createElementVNode(\"header\", _hoisted_2, [_hoisted_3, _createElementVNode(\"input\", {\n    class: \"new-todo\",\n    autofocus: \"\",\n    autocomplete: \"off\",\n    placeholder: \"What needs to be done?\",\n    onKeyup: _cache[0] || (_cache[0] = _withKeys((...args) => $options.addTodo && $options.addTodo(...args), [\"enter\"]))\n  }, null, 32 /* HYDRATE_EVENTS */)]), _createCommentVNode(\" main section \"), _withDirectives(_createElementVNode(\"section\", _hoisted_4, [_createElementVNode(\"input\", {\n    class: \"toggle-all\",\n    id: \"toggle-all\",\n    type: \"checkbox\",\n    checked: $options.allChecked,\n    onChange: _cache[1] || (_cache[1] = $event => _ctx.toggleAll(!$options.allChecked))\n  }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_5), _hoisted_6, _createElementVNode(\"ul\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredTodos, (todo, index) => {\n    return _openBlock(), _createBlock(_component_TodoItem, {\n      key: index,\n      todo: todo\n    }, null, 8 /* PROPS */, [\"todo\"]);\n  }), 128 /* KEYED_FRAGMENT */))])], 512 /* NEED_PATCH */), [[_vShow, $options.todos.length]]), _createCommentVNode(\" footer \"), _withDirectives(_createElementVNode(\"footer\", _hoisted_8, [_createElementVNode(\"span\", _hoisted_9, [_createElementVNode(\"strong\", null, _toDisplayString($options.remaining), 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString($options.pluralize($options.remaining, 'item')) + \" left \", 1 /* TEXT */)]), _createElementVNode(\"ul\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.filters, (val, key) => {\n    return _openBlock(), _createElementBlock(\"li\", null, [_createElementVNode(\"a\", {\n      href: '#/' + key,\n      class: _normalizeClass({\n        selected: $data.visibility === key\n      }),\n      onClick: $event => $data.visibility = key\n    }, _toDisplayString($options.capitalize(key)), 11 /* TEXT, CLASS, PROPS */, _hoisted_11)]);\n  }), 256 /* UNKEYED_FRAGMENT */))]), _withDirectives(_createElementVNode(\"button\", {\n    class: \"clear-completed\",\n    onClick: _cache[2] || (_cache[2] = (...args) => _ctx.clearCompleted && _ctx.clearCompleted(...args))\n  }, \" Clear completed \", 512 /* NEED_PATCH */), [[_vShow, $options.todos.length > $options.remaining]])], 512 /* NEED_PATCH */), [[_vShow, $options.todos.length]])]);\n}","map":{"version":3,"mappings":";;EAGWA,KAAK,EAAC;AAAS;;EAEdA,KAAK,EAAC;AAAQ;gCACpBC,oBAAc,YAAV,OAAK;;EAQFD,KAAK,EAAC;AAAM;;gCAKnBC,oBAAgC;EAAzBC,GAAG,EAAC;AAAY;;EACnBF,KAAK,EAAC;AAAW;;EASfA,KAAK,EAAC;AAAQ;;EACdA,KAAK,EAAC;AAAY;;EAIpBA,KAAK,EAAC;AAAS;;;;uBA/BvBG,oBA4CU,WA5CVC,UA4CU,GA3CRC,+BAAe,EACfJ,oBAOS,UAPTK,UAOS,GANPC,UAAc,EACdN,oBAIyB;IAJlBD,KAAK,EAAC,UAAU;IACrBQ,SAAS,EAAT,EAAS;IACTC,YAAY,EAAC,KAAK;IAClBC,WAAW,EAAC,wBAAwB;IACnCC,OAAK,mDAAQC,6CAAO;uCAEzBP,qCAAqB,kBACrBJ,oBAaU,WAbVY,UAaU,GAZRZ,oBAGmC;IAH5BD,KAAK,EAAC,YAAY;IAACc,EAAE,EAAC,YAAY;IACvCC,IAAI,EAAC,UAAU;IACdC,OAAO,EAAEJ,mBAAU;IACnBK,QAAM,sCAAEC,cAAS,EAAEN,mBAAU;wDAChCO,UAAgC,EAChClB,oBAMK,MANLmB,UAMK,sBALHjB,oBAIEkB,6BAHwBT,sBAAa,GAA7BU,IAAI,EAAEC,KAAK;yBADrBC,aAIEC;MAFCC,GAAG,EAAEH,KAAK;MACVD,IAAI,EAAEA;;sEAViBV,cAAK,CAACe,MAAM,KAc1CtB,+BAAe,kBACfJ,oBAiBS,UAjBT2B,UAiBS,GAhBP3B,oBAGO,QAHP4B,UAGO,GAFL5B,oBAAgC,iCAArBW,kBAAS,mCAAY,GAChC,oBAAGA,kBAAS,CAACA,kBAAS,aAAY,QACpC,mBACAX,oBAMK,MANL6B,WAMK,sBALH3B,oBAIKkB,6BAJoBU,aAAO,GAApBC,GAAG,EAAEN,GAAG;yBAApBvB,oBAIK,aAHHF,oBAEqD;MAFjDgC,IAAI,SAASP,GAAG;MACjB1B,KAAK;QAAAkC,UAAcH,gBAAU,KAAKL;MAAG;MACrCS,OAAK,YAAEJ,gBAAU,GAAGL;wBAAQd,mBAAU,CAACc,GAAG;sDAGjDzB,oBAIS;IAJDD,KAAK,EAAC,iBAAiB;IAE5BmC,OAAK,yCAAEjB,mDAAc;KAAE,mBAE1B,mCAHUN,cAAK,CAACe,MAAM,GAAGf,kBAAS,uCAbLA,cAAK,CAACe,MAAM","names":["class","_createElementVNode","for","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_2","_hoisted_3","autofocus","autocomplete","placeholder","onKeyup","$options","_hoisted_4","id","type","checked","onChange","_ctx","_hoisted_6","_hoisted_7","_Fragment","todo","index","_createBlock","_component_TodoItem","key","length","_hoisted_8","_hoisted_9","_hoisted_10","$data","val","href","selected","onClick"],"sourceRoot":"","sources":["C:\\Users\\User\\vue-chart\\src\\components\\App.vue"],"sourcesContent":["<style src=\"todomvc-app-css/index.css\"></style>\n\n<template>\n  <section class=\"todoapp\">\n    <!-- header -->\n    <header class=\"header\">\n      <h1>todos</h1>\n      <input class=\"new-todo\"\n        autofocus\n        autocomplete=\"off\"\n        placeholder=\"What needs to be done?\"\n        @keyup.enter=\"addTodo\">\n    </header>\n    <!-- main section -->\n    <section class=\"main\" v-show=\"todos.length\">\n      <input class=\"toggle-all\" id=\"toggle-all\"\n        type=\"checkbox\"\n        :checked=\"allChecked\"\n        @change=\"toggleAll(!allChecked)\">\n      <label for=\"toggle-all\"></label>\n      <ul class=\"todo-list\">\n        <TodoItem\n          v-for=\"(todo, index) in filteredTodos\"\n          :key=\"index\"\n          :todo=\"todo\"\n        />\n      </ul>\n    </section>\n    <!-- footer -->\n    <footer class=\"footer\" v-show=\"todos.length\">\n      <span class=\"todo-count\">\n        <strong>{{ remaining }}</strong>\n        {{ pluralize(remaining, 'item') }} left\n      </span>\n      <ul class=\"filters\">\n        <li v-for=\"(val, key) in filters\">\n          <a :href=\"'#/' + key\"\n            :class=\"{ selected: visibility === key }\"\n            @click=\"visibility = key\">{{ capitalize(key) }}</a>\n        </li>\n      </ul>\n      <button class=\"clear-completed\"\n        v-show=\"todos.length > remaining\"\n        @click=\"clearCompleted\">\n        Clear completed\n      </button>\n    </footer>\n  </section>\n</template>\n\n<script>\nimport { mapActions } from 'vuex'\nimport TodoItem from './TodoItem.vue'\n\nconst filters = {\n  all: todos => todos,\n  active: todos => todos.filter(todo => !todo.done),\n  completed: todos => todos.filter(todo => todo.done)\n}\n\nexport default {\n  components: { TodoItem },\n  data () {\n    return {\n      visibility: 'all',\n      filters: filters\n    }\n  },\n  computed: {\n    todos () {\n      return this.$store.state.todos\n    },\n    allChecked () {\n      return this.todos.every(todo => todo.done)\n    },\n    filteredTodos () {\n      return filters[this.visibility](this.todos)\n    },\n    remaining () {\n      return this.todos.filter(todo => !todo.done).length\n    }\n  },\n  methods: {\n    ...mapActions([\n      'toggleAll',\n      'clearCompleted'\n    ]),\n    addTodo (e) {\n      const text = e.target.value\n      if (text.trim()) {\n        this.$store.dispatch('addTodo', text)\n      }\n      e.target.value = ''\n    },\n    pluralize (n, w) {\n      return n === 1 ? w : (w + 's')\n    },\n    capitalize (s) {\n      return s.charAt(0).toUpperCase() + s.slice(1)\n    }\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}