{"ast":null,"code":"import { vShow as _vShow, withKeys as _withKeys, createElementVNode as _createElementVNode, withDirectives as _withDirectives, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = [\"value\"];\nconst _hoisted_2 = {\n  class: \"view\"\n};\nconst _hoisted_3 = [\"checked\"];\nconst _hoisted_4 = [\"textContent\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"li\", {\n    class: _normalizeClass([\"todo appointments\", {\n      completed: $props.todo.done,\n      editing: $setup.editing\n    }])\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"edit\",\n    value: $props.todo.text,\n    ref: \"input\",\n    onKeyup: [_cache[0] || (_cache[0] = _withKeys((...args) => $setup.doneEdit && $setup.doneEdit(...args), [\"enter\"])), _cache[1] || (_cache[1] = _withKeys((...args) => $setup.cancelEdit && $setup.cancelEdit(...args), [\"esc\"]))],\n    onBlur: _cache[2] || (_cache[2] = (...args) => $setup.doneEdit && $setup.doneEdit(...args))\n  }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_1), [[_vShow, $setup.editing]]), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"input\", {\n    class: \"toggle\",\n    type: \"checkbox\",\n    checked: $props.todo.done,\n    onChange: _cache[3] || (_cache[3] = $event => $setup.toggleTodo($props.todo))\n  }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_3), _createElementVNode(\"label\", {\n    textContent: _toDisplayString($props.todo.text),\n    onDblclick: _cache[4] || (_cache[4] = $event => $setup.editing = true)\n  }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_4), _createElementVNode(\"button\", {\n    class: \"destroy\",\n    onClick: _cache[5] || (_cache[5] = $event => $setup.removeTodo($props.todo))\n  })])], 2 /* CLASS */);\n}","map":{"version":3,"mappings":";;;EAUWA,KAAK,EAAC;AAAM;;;;uBATrBC,oBAiBK;IAjBDD,KAAK,mBAAC,mBAAmB;MAAAE,WAAsBC,WAAI,CAACC,IAAI;MAAAC,SAAEC;IAAO;sBAEnEC,oBAMmB;IANZP,KAAK,EAAC,MAAM;IAEhBQ,KAAK,EAAEL,WAAI,CAACM,IAAI;IACjBC,GAAG,EAAC,OAAO;IACVC,OAAK,oDAAQL,2CAAQ,gEACVA,+CAAU;IACrBM,MAAI,yCAAEN,2CAAQ;kEALPA,cAAO,KAMfC,oBAOI,OAPJM,UAOI,GANJN,oBAG6B;IAHtBP,KAAK,EAAC,QAAQ;IACnBc,IAAI,EAAC,UAAU;IACdC,OAAO,EAAEZ,WAAI,CAACC,IAAI;IAClBY,QAAM,sCAAEV,iBAAU,CAACH,WAAI;wDAC1BI,oBAA6D;iBAAtDU,iBAAQd,MAAU,KAAN,CAACM,IAAI;IAAGS,UAAQ,sCAAEZ,cAAO;wDAC5CC,oBAA2D;IAAnDP,KAAK,EAAC,SAAS;IAAEmB,OAAK,sCAAEb,iBAAU,CAACH,WAAI","names":["class","_createElementBlock","completed","$props","done","editing","$setup","_createElementVNode","value","text","ref","onKeyup","onBlur","_hoisted_2","type","checked","onChange","_toDisplayString","onDblclick","onClick"],"sourceRoot":"","sources":["C:\\Users\\User\\vue-chart\\src\\components\\TodoItem.vue"],"sourcesContent":["<template>\n  <li class=\"todo appointments\" :class=\"{ completed: todo.done, editing }\">\n    \n    <input class=\"edit\"\n      v-show=\"editing\"\n      :value=\"todo.text\"\n      ref=\"input\"\n      @keyup.enter=\"doneEdit\"\n      @keyup.esc=\"cancelEdit\"\n      @blur=\"doneEdit\">\n      <div class=\"view\">\n      <input class=\"toggle\"\n        type=\"checkbox\"\n        :checked=\"todo.done\"\n        @change=\"toggleTodo(todo)\">\n      <label v-text=\"todo.text\" @dblclick=\"editing = true\"></label>\n      <button class=\"destroy\" @click=\"removeTodo(todo)\"></button>\n    </div>\n  </li>\n</template>\n\n<script>\nimport { ref, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\n\nexport default {\n  name: 'To-do',\n  props: ['todo'],\n  setup (props) {\n    const input = ref(null)\n\n    const editing = ref(false)\n\n    watch(editing, (v) => {\n      v && nextTick(() => { input.value.focus() })\n    })\n\n    const store = useStore()\n\n    const editTodo = (todo, value) => store.dispatch('editTodo', { todo, value })\n    const toggleTodo = (todo) => store.dispatch('toggleTodo', todo)\n    const removeTodo = (todo) => store.dispatch('removeTodo', todo)\n\n    function doneEdit (e) {\n      const value = e.target.value.trim()\n      if (!value) {\n        removeTodo(props.todo)\n      } else if (editing.value) {\n        editTodo(props.todo, value)\n      }\n      editing.value = false\n    }\n\n    function cancelEdit (e) {\n      e.target.value = props.todo.text\n      editing.value = false\n    }\n\n    return {\n      input,\n      editing,\n      toggleTodo,\n      doneEdit,\n      cancelEdit,\n      removeTodo\n    }\n  }\n}\n</script>\n<style>\n.appointments{\n  list-style: none;\n  margin-bottom: 1rem;\n}\n.appointments div{\n    border: 2px solid #EFF2F2;\n    border-radius: 15px;\n    margin-right: 2rem;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}