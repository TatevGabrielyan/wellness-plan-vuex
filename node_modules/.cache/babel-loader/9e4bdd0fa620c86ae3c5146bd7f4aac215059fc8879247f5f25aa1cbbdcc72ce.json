{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  class: \"Chart\"\n};\nconst _hoisted_3 = [\"value\", \"onInput\"];\nconst _hoisted_4 = [\"value\", \"onInput\"];\nconst _hoisted_5 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_WellnessPlan = _resolveComponent(\"WellnessPlan\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n    class: \"button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.addExperience && $options.addExperience(...args))\n  }, \"Add experience\"), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_WellnessPlan, {\n    ref: \"skills_chart\",\n    \"chart-data\": $data.chartData,\n    options: $data.options\n  }, null, 8 /* PROPS */, [\"chart-data\", \"options\"]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.currentDataSet, (val, i) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: i\n    }, [_createElementVNode(\"input\", {\n      type: \"range\",\n      min: \"0\",\n      max: \"8\",\n      placeholder: \"name\",\n      value: $options.currentDataSet[i],\n      onInput: $event => $options.updateAmount($event.target.value, i)\n    }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_3), _createElementVNode(\"span\", null, _toDisplayString($options.currentDataSet[i]) + \" years \", 1 /* TEXT */), _createElementVNode(\"input\", {\n      type: \"text\",\n      value: $data.chartData.labels[i],\n      onInput: $event => $options.updateName($event.target.value, i)\n    }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_4), _createElementVNode(\"button\", {\n      onClick: $event => $options.remove(i)\n    }, \"remove\", 8 /* PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"mappings":";;EACOA,EAAE,EAAC;AAAK;;EAENC,KAAK,EAAC;AAAO;;;;;;uBAFpBC,oBA4BM,OA5BNC,UA4BM,GA3BJC,oBAAqE;IAA7DH,KAAK,EAAC,QAAQ;IAAEI,OAAK,yCAAEC,yDAAa;KAAE,gBAAc,GAC5DF,oBAyBM,OAzBNG,UAyBM,GAxBJC,aAKeC;IAJbC,GAAG,EAAC,cAAc;IACjB,YAAU,EAAEC,eAAS;IACrBC,OAAO,EAAED;yEAIZT,oBAgBMW,6BAhBkBP,uBAAc,GAAzBQ,GAAG,EAAEC,CAAC;yBAAnBb,oBAgBM;MAhBmCc,GAAG,EAAED;IAAC,IAC7CX,oBAOE;MANAa,IAAI,EAAC,OAAO;MACZC,GAAG,EAAC,GAAG;MACPC,GAAG,EAAC,GAAG;MACPC,WAAW,EAAC,MAAM;MACjBC,KAAK,EAAEf,uBAAc,CAACS,CAAC;MACvBO,OAAK,YAAEhB,qBAAY,CAACiB,MAAM,CAACC,MAAM,CAACH,KAAK,EAAEN,CAAC;0DAE7CX,oBAA4C,+BAAlCE,uBAAc,CAACS,CAAC,KAAI,SAAO,iBACrCX,oBAIE;MAHAa,IAAI,EAAC,MAAM;MACVI,KAAK,EAAEV,eAAS,CAACc,MAAM,CAACV,CAAC;MACzBO,OAAK,YAAEhB,mBAAU,CAACiB,MAAM,CAACC,MAAM,CAACH,KAAK,EAAEN,CAAC;0DAE3CX,oBAA0C;MAAjCC,OAAK,YAAEC,eAAM,CAACS,CAAC;OAAG,QAAM","names":["id","class","_createElementBlock","_hoisted_1","_createElementVNode","onClick","$options","_hoisted_2","_createVNode","_component_WellnessPlan","ref","$data","options","_Fragment","val","i","key","type","min","max","placeholder","value","onInput","$event","target","labels"],"sourceRoot":"","sources":["C:\\Users\\User\\vue-chart\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <button class=\"button\" @click=\"addExperience\">Add experience</button>\n    <div class=\"Chart\">\n      <WellnessPlan\n        ref=\"skills_chart\"\n        :chart-data=\"chartData\"\n        :options=\"options\"\n      >\n      </WellnessPlan>\n\n      <div v-for=\"(val, i) in currentDataSet\" :key=\"i\">\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"8\"\n          placeholder=\"name\"\n          :value=\"currentDataSet[i]\"\n          @input=\"updateAmount($event.target.value, i)\"\n        />\n        <span> {{ currentDataSet[i] }} years </span>\n        <input\n          type=\"text\"\n          :value=\"chartData.labels[i]\"\n          @input=\"updateName($event.target.value, i)\"\n        />\n        <button @click=\"remove(i)\">remove</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport WellnessPlan from \"./components/WellnessPlan\";\nimport randomColor from \"randomcolor\";\n\nconst options = {\n  responsive: true,\n  maintainAspectRatio: false,\n  animation: {\n    animateRotate: false,\n  },\n};\n\nexport default {\n  name: \"App\",\n  components: { WellnessPlan },\n  data() {\n    return {\n      options,\n      chartData: {\n        labels: [\"skill1\"],\n        datasets: [\n          {\n            backgroundColor: [randomColor()],\n            data: [1, 5],\n          },\n        ],\n      },\n    };\n  },\n  computed: {\n    currentDataSet() {\n      return this.chartData.datasets[0].data;\n    },\n  },\n  methods: {\n    updateChart() {\n      this.$refs.skills_chart.update();\n    },\n    updateAmount(amount, index) {\n      this.chartData.datasets[0].data.splice(index, 1, amount);\n      this.updateChart();\n    },\n    updateName(text, index) {\n      this.chartData.labels.splice(index, 1, text);\n      this.updateChart();\n    },\n    addExperience() {\n      const currentDataset = this.chartData.datasets[0];\n      this.chartData.labels.push(`Skill ${currentDataset.data.length + 1}`);\n      currentDataset.data.push(0);\n      currentDataset.backgroundColor.push(randomColor());\n      this.updateChart();\n    },\n    remove(index) {\n      const currentDataset = this.chartData.datasets[0];\n      currentDataset.data.splice(index, 1);\n      this.chartData.labels.splice(index, 1);\n      currentDataset.backgroundColor.splice(index, 1);\n      this.updateChart();\n    },\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: \"Avenir\", Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}